[meta title:"Idyll REGL" description:"Using Idyll with REGL for inline webgl" /]

[IdyllLogo /]

[Header
  title:"Using regl with Idyll"
  subtitle:"The stateless nature of regl makes it a good match for Idyll"
  author:"Matthew Conlen"
  authorLink:"https://twitter.com/" /]

If you haven't seen regl, go check out the website: [link href:"http://regl.party/" text:"http://regl.party/" /].
It's a really nice library for stateless WebGL programming, created by [link href:"https://0hz.life/" text:"Mikola Lysenko" /].
Because of the statelessness, regl commands are naturally parameterized, making it straightforward to include WebGL sketches
inline with your text in Idyll.

For example, with a minor modification to regl's [link href:"http://regl.party/examples" text:"particles example" /]
I can embed it in an Idyll document. With just a couple of lines, I can add a dynamic variable to change the size of the particles,

[var name:"particleSize" value:1.0 /]

[Particles size:particleSize /]

Particle size: [dynamic value:particleSize interval:0.05 min:0.4 max:8 /]

[gist gist:"0f83a12e29b268ffca39f471ecf39e91" file:"particles.idl" /]

[var name:"t" value:2.08 /]
and let a reader change the angle of rotation
of this [link href:"http://regl.party/examples" text:"geomorphing bunny" /].

[Geomorph t:t /]

θ = [dynamic value:t interval:0.01 format:"0.2f"  /]

To help with this, I've abstracted out a component that uses [link href:"https://github.com/regl-project/multi-regl" text:"multi-regl" /]
to multiplex a single regl instance over the entire page. To create a custom regl component, create a class that
extends from `idyll-regl-component` and implements the `initialize()` function:

[gist gist:"0f83a12e29b268ffca39f471ecf39e91" file:"idyll-regl.js" /]


The `idyll-regl-component` handles taking control of the DOM from react, and instantiating the multiplexer.
This can be combined with many of Idyll's built-in components to quickly add interactivity. See this component
on github: [link href:"https://github.com/idyll-lang/idyll-regl-component" text:"https://github.com/idyll-lang/idyll-regl-component" /].

For example, you could implement a play/pause button.

[var name:"play" value:1 /]
[var name:"frameOffset" value:0 /]

[Particles play:play frameOffset:frameOffset /]

[Button onClick:`play = 1 - play`]
[DisplayVar var:`play === 0 ? '▶' : '❙❙'` /]
[/Button]
[small](Click me!)[/small]

[div style:`{opacity: 1 - play}`]
And add a way to scrub through time:
[inset][Range min:`-200` max:`200` value:frameOffset /][/inset]
[/div]

[gist gist:"0f83a12e29b268ffca39f471ecf39e91" file:"pause.idl" /]

In this case, the particle code was updated to take a parameter that will pause its internal frame count,
and a parameter to add an offset to that count.

Read more about Idyll at [link href:"https://idyll-lang.github.io/" text:"https://idyll-lang.github.io/" /],
or [link href:"https://github.com/idyll-lang/idyll-regl-component/tree/master/examples/basic" text:"check out the source for this example" /].